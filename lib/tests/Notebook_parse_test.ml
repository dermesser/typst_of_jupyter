
open Notebook

module Json = Yojson.Basic
open Base

let dump_sexp s = Out_channel.output_string Out_channel.stdout (Sexp.to_string_hum s)

let test_md_cell_1 =
  {|
{
"cell_type" : "markdown",
"metadata" : {},
"source" : ["# Hello World\nmulti-line *markdown*"]
}
|}

let%expect_test _ =
  let cell_json = Json.from_string test_md_cell_1 in
  let parsed = Markdown.cell_of_json cell_json in
  let md = Parsexp.Single.parse_string_exn (Omd.to_sexp parsed.source) in
  dump_sexp [%sexp {meta = ((Json.show (`Assoc parsed.meta)) : string); source = (md: Sexp.t)}];
  [%expect{|
    ((meta "`Assoc ([])")
     (source
      ((heading 1 "Hello World")
       (paragraph (concat "multi-line " (emph markdown)))))) |}]

let test_raw_cell_1 = {|
{
  "cell_type" : "raw",
  "metadata" : {
    "format" : "mime/type"
  },
  "source" : ["[some nbformat output text]"]
}
|}

let%expect_test _ =
  let cell = Raw.cell_of_json (Json.from_string test_raw_cell_1) in
  dump_sexp [%sexp { source = (cell.source : string); mime = (cell.mime : string); meta = ((Json.show (`Assoc cell.meta)):string) }];
  [%expect{|
    ((source "[some nbformat output text]\n") (mime mime/type)
     (meta "`Assoc ([(\"format\", `String (\"mime/type\"))])")) |}]

let test_outputs =
  [
    {|{
    "output_type" : "stream",
    "name" : "stdout",
    "text" : "[multiline stream text]"
  }|};
    {|{
    "output_type" : "display_data",
    "data" : {
      "text/plain" : "[multiline text data]",
      "image/png": "[base64-encoded-multiline-png-data]",
      "application/json": {
        "key1": "data",
        "key2": ["some", "values"],
        "key3": {"more": "data"}
      },
      "application/vnd.exampleorg.type+json": {
        "key1": "data",
        "key2": ["some", "values"],
        "key3": {"more": "data"}
      }
    },
    "metadata" : {
      "image/png": {
        "width": 640,
        "height": 480
      }
    }
  }|};
    {|{
    "output_type" : "execute_result",
    "execution_count": 42,
    "data" : {
      "text/plain" : "[multiline text data]",
      "image/png": "[base64-encoded-multiline-png-data]",
      "application/json": {
        "json": "data"
      }
    },
    "metadata" : {
      "image/png": {
        "width": 640,
        "height": 480
      }
    }
  }
  |};
    {|

  {
      "output_type": "error",
      "ename" : "some-error",
      "evalue" : "some-value",
      "traceback" : ["Trace", "Trace", "Trace"]
  }

  |};
  ]

let%expect_test _ =
  let js_outputs = List.map ~f:Json.from_string test_outputs in
  let outputs = Code.parse_outputs js_outputs in
  let o = Out_channel.stdout in
  List.iter
    ~f:(fun s ->
      Out_channel.output_string o s;
      Out_channel.output_string o "\n")
    (List.map ~f:Code.output_type outputs);
  [%expect {|
    stream
    display_data
    execute_result
    error |}]

let%expect_test _ =
  let read_nb = In_channel.input_all in
  (* dump_sexp [%sexp ((Core_unix.getcwd ()):string) ]; *)
  let test_nb = In_channel.with_open_text "../../../../../../Test Notebook.ipynb" read_nb in
  let test_nb_js = Json.from_string test_nb in
  let nb = notebook_of_json test_nb_js in
  dump_sexp (sexp_of_notebook nb);
  [%expect {|
    ((meta
      ((kernelspec
        ((display_name "Julia Default 1.9.0-rc2") (language julia)
         (name julia-default-1.9)))
       (language_info
        ((file_extension .jl) (mimetype application/julia) (name julia)
         (version 1.9.2)))))
     (nbformat 4.5)
     (cells
      ((code
        ((execount 2) (meta ())
         (source
           "using Plots\
          \ngr()\
          \ndefault(fmt = :png)\
          \n\
          \nusing DataFrames")
         (outputs ())))
       (markdown
        ((meta ()) (attachments ((file imahzuvzibsh.png)))
         (source
          ((heading 2 "Using Plots.jl")
           (paragraph
            (concat
             "Plots.jl outputs plots in different formats. It is written in "
             (url (link Julia https://julialang.org)) :))
           (paragraph img)))))
       (code
        ((execount 21) (meta ())
         (source  "f(x) = sin(x)\
                 \ng(x) = cos(x)\
                 \nh(x) = tan(x)")
         (outputs
          ((execute_result
            ((data ((text/plain ("h (generic function with 1 method)"))))
             (meta ())))))))
       (code
        ((execount 22) (meta ()) (source "xs = LinRange(0, 2pi, 100)")
         (outputs
          ((execute_result
            ((data
              ((text/plain
                ("100-element LinRange{Float64, Int64}:\n"
                 " 0.0, 0.0634665, 0.126933, 0.1904, \226\128\166, 6.09279, 6.15625, 6.21972, 6.28319"))))
             (meta ())))))))
       (markdown
        ((meta ()) (attachments ((file capalsxevcgk.png)))
         (source
          ((paragraph "These are the trigonometric functions,")
           (paragraph "$$\\sin" (x) $$) (paragraph "$$\\cos" (x) $$)
           (paragraph "$$\\tan" (x) $$)
           (paragraph "According to Wikipedia, their graphs look like this:")
           (paragraph img)))))
       (code
        ((execount 23) (meta ())
         (source
          "plot(xs, [f, g, h]; ylim = (-2, 2), framestyle = :box, grid = false, palette = :tab10)")
         (outputs
          ((execute_result
            ((data
              ((image/png
                )))
             (meta ())))))))
       (markdown
        ((meta ()) (attachments ())
         (source ((paragraph "Let's produce an error:")))))
       (code
        ((execount 24) (meta ()) (source "i(x)")
         (outputs
          ((error
            ((ename LoadError) (evalue "UndefVarError: `i` not defined")
             (traceback
              ("UndefVarError: `i` not defined" "" Stacktrace:
               " [1] top-level scope" "   @ In[24]:1"))))))))
       (markdown
        ((meta ()) (attachments ())
         (source
          ((heading 2 "Rich Outputs")
           (paragraph "We can try some table outputs, for example:")))))
       (code
        ((execount 3) (meta ())
         (source
          "df = DataFrame((col1 = [\"First\", \"Second\", \"Third\"], col2 = [1, 2, 3]))")
         (outputs
          ((execute_result
            ((data
              ((text/html
                ("<div><div style = \"float: left;\"><span>3\195\1512 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">col1</th><th style = \"text-align: left;\">col2</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">First</td><td style = \"text-align: right;\">1</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">Second</td><td style = \"text-align: right;\">2</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">Third</td><td style = \"text-align: right;\">3</td></tr></tbody></table></div>"))
               (text/latex
                ("\\begin{tabular}{r|cc}\n" "\t& col1 & col2\\\\\n" "\t\\hline\n"
                 "\t& String & Int64\\\\\n" "\t\\hline\n"
                 "\t1 & First & 1 \\\\\n" "\t2 & Second & 2 \\\\\n"
                 "\t3 & Third & 3 \\\\\n" "\\end{tabular}\n"))
               (text/plain
                ("\027[1m3\195\1512 DataFrame\027[0m\n"
                 "\027[1m Row \027[0m\226\148\130\027[1m col1   \027[0m\027[1m col2  \027[0m\n"
                 "     \226\148\130\027[90m String \027[0m\027[90m Int64 \027[0m\n"
                 "\226\148\128\226\148\128\226\148\128\226\148\128\226\148\128\226\148\188\226\148\128\226\148\128\226\148\128\226\148\128\226\148\128\226\148\128\226\148\128\226\148\128\226\148\128\226\148\128\226\148\128\226\148\128\226\148\128\226\148\128\226\148\128\n"
                 "   1 \226\148\130 First       1\n"
                 "   2 \226\148\130 Second      2\n"
                 "   3 \226\148\130 Third       3"))))
             (meta ())))))))
       (markdown
        ((meta ()) (attachments ()) (source ((paragraph "More formatting")))))
       (markdown
        ((meta ()) (attachments ())
         (source
          ((paragraph (concat (emph Emph) " " (strong strong))) (code-block)
           (paragraph "Hard break") (paragraph "Soft break    should all work")))))))) |}]
